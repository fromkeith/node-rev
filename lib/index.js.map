{"version":3,"sources":["../src/index.es6"],"names":["options","manifest","files","filesPath","outputDir","__dirname","outputDest","resolve","file","hash","revPath","pth","ext","baseFilename","basename","extname","join","dirname","writeManifest","ensureFileSync","writeFileSync","JSON","stringify","filesPathParts","split","forEach","filePathPart","concat","sync","baseDir","indexOf","substring","length","slice","parsedPath","parse","filename","base","dirParts","dir","fileDirParts","unshift","pop","fileDir","buffer","readFileSync","revdPath","console","warn"],"mappings":"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","file":"index.js","sourcesContent":["import revHash from'rev-hash'\nimport path from'path'\nimport fs from'fs-extra'\nimport glob from'glob'\nimport commondir from'commondir'\nimport assert from'assert'\n\nexport default function(options) {\n\n  const manifest = {}\n  //use assert to require filesPath, outputDir\n  assert(options.files, 'files property is required')\n  const filesPath = options.files\n  const outputDir = options.outputDir || __dirname\n  const outputDest = path.resolve(outputDir)\n  const file = options.file\n  const hash = options.hash || false\n\n  function revPath(pth, hash) {\n    let ext = '';\n    let baseFilename = path.basename(pth);\n    while (baseFilename && path.extname(baseFilename) !== '') {\n      ext = path.extname(baseFilename) + ext;\n      baseFilename = path.basename(pth, ext);\n    }\n    return path.join(path.dirname(pth), `${baseFilename}-${hash}${ext}`);\n  }\n\n  function writeManifest(manifest) {\n    if (file) {\n      fs.ensureFileSync(path.resolve(file))\n      fs.writeFileSync(path.resolve(file), JSON.stringify(manifest), 'utf8')\n    } else {\n      fs.writeFileSync(path.join(__dirname, 'assets.json'), JSON.stringify(manifest), 'utf8');\n    }\n  }\n\n  const filesPathParts = filesPath.split(',')\n  let files = []\n  filesPathParts.forEach(function(filePathPart) {\n    files = files.concat(files, glob.sync(path.resolve(filePathPart), {}))\n  })\n\n  let baseDir\n  if (filesPath.indexOf('**/*') > -1) {\n    baseDir = path.resolve(filesPath.substring(0, filesPath.indexOf('**/*')));\n  } else if (files && files.length === 1) {\n    baseDir = files[0].split('/').slice(0,-1).join('/')\n  } else {\n    baseDir = commondir(files)\n  }\n  if (files && files.length) {\n    files.forEach(function(file) {\n      const parsedPath = path.parse(file)\n      const filename = parsedPath.base\n      const dirParts = parsedPath.dir.split('/')\n      let fileDirParts = []\n      while(dirParts.join('/') !== baseDir) {\n        fileDirParts.unshift(dirParts.pop())\n      }\n      let fileDir = fileDirParts.join('/')\n      const buffer = fs.readFileSync(file)\n      if (hash) {\n        const hash = revHash(buffer)\n        const revdPath = revPath(path.join(fileDir, filename), hash)\n        manifest[path.join(fileDir, filename)] = revdPath\n        fs.ensureFileSync(path.join(outputDest, revdPath))\n        fs.writeFileSync(path.join(outputDest, revdPath), buffer)\n      } else {\n        manifest[path.join(fileDir, filename)] = path.join(fileDir, filename)\n        fs.ensureFileSync(path.join(outputDest, path.join(fileDir, filename)))\n        fs.writeFileSync(path.join(outputDest, path.join(fileDir, filename)), buffer)\n      }\n    })\n    writeManifest(manifest)\n\n  } else {\n    console.warn(`No files found matching ${path.resolve(filesPath)}`)\n    writeManifest({})\n  }\n}\n"]}